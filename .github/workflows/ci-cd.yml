name: Django CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      PINEKEY: ${{ secrets.PINEKEY }}
      OPENKEY: ${{ secrets.OPENKEY }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11.5'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python manage.py migrate
        pytest
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        
  deploy:
    needs: test
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      AZURE_CONTAINER_NAME: app-web-certif-evgeni
      RESOURCE_GROUP: END_Project_Evgeni
      IMAGE_NAME: evgeni1494/django-test:latest

    steps:
    - uses: actions/checkout@v3

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t $IMAGE_NAME .

    - name: Push Docker image to Docker Hub
      run: docker push $IMAGE_NAME

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Remove existing Azure Container Instance if exists
      run: |
        az container delete --resource-group $RESOURCE_GROUP --name $AZURE_CONTAINER_NAME --yes --no-wait || true

    - name: Create new Azure Container Instance
      run: |
        az container create \
          --resource-group $RESOURCE_GROUP \
          --name $AZURE_CONTAINER_NAME \
          --image $IMAGE_NAME \
          --cpu 1 \
          --memory 1 \
          --ports 8000 \
          --environment-variables PINEKEY=${{ secrets.PINEKEY }} OPENKEY=${{ secrets.OPENKEY }} \
          --restart-policy Always

